import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from vehicle_msgs.msg import ControlCmd  # throttle_pct, brake_pct, steering_pct

class JoyBridge(Node):
    def __init__(self):
        super().__init__('joy_bridge')
        self.create_subscription(Twist, '/cmd_vel', self.cmd_cb, 10)
        self.pub = self.create_publisher(ControlCmd, '/vehicle_control', 10)

    def cmd_cb(self, msg: Twist):
        cmd = ControlCmd()
        # map joystick linear.x → throttle/brake
        if msg.linear.x >= 0:
            cmd.throttle_pct = min(msg.linear.x * 100.0, 100.0)
            cmd.brake_pct = 0.0
        else:
            cmd.throttle_pct = 0.0
            cmd.brake_pct = min(-msg.linear.x * 100.0, 100.0)

        # map joystick angular.z → steering
        cmd.steering_pct = (msg.angular.z + 1.0) * 50.0  # -1 → 0%, +1 → 100%
        self.pub.publish(cmd)

def main(args=None):
    rclpy.init(args=args)
    node = JoyBridge()
    rclpy.spin(node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
